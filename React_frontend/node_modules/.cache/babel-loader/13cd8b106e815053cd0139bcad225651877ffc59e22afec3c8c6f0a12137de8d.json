{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLogicOperator } from '../../../models';\nimport { GLOBAL_API_REF, isInternalFilter } from '../../../colDef/utils';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { buildWarning } from '../../../utils/warning';\nimport { getPublicApiRef } from '../../../utils/getPublicApiRef';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector, gridVisibleColumnFieldsSelector } from '../columns';\nlet hasEval;\nfunction getHasEval() {\n  if (hasEval !== undefined) {\n    return hasEval;\n  }\n  try {\n    hasEval = new Function('return true')();\n  } catch (_) {\n    hasEval = false;\n  }\n  return hasEval;\n}\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operator.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n  if (cleanItem.operator == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.field];\n    cleanItem.operator = column && column.filterOperators[0].value;\n  }\n  return cleanItem;\n};\nconst filterModelDisableMultiColumnsFilteringWarning = buildWarning(['MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nconst filterModelMissingItemIdWarning = buildWarning('MUI: The `id` field is required on `filterModel.items` when you use multiple filters.', 'error');\nconst filterModelMissingItemOperatorWarning = buildWarning('MUI: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.', 'error');\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    filterModelDisableMultiColumnsFilteringWarning();\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operator == null);\n  if (hasItemsWithoutIds) {\n    filterModelMissingItemIdWarning();\n  }\n  if (hasItemWithoutOperator) {\n    filterModelMissingItemOperatorWarning();\n  }\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\nexport const removeDiacritics = value => {\n  if (typeof value === 'string') {\n    return value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  }\n  return value;\n};\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.field || !filterItem.operator) {\n    return null;\n  }\n  const column = apiRef.current.getColumn(filterItem.field);\n  if (!column) {\n    return null;\n  }\n  let parsedValue;\n  if (column.valueParser) {\n    var _filterItem$value;\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n  } else {\n    parsedValue = filterItem.value;\n  }\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  if (ignoreDiacritics) {\n    parsedValue = removeDiacritics(parsedValue);\n  }\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n  const filterOperators = column.filterOperators;\n  if (!(filterOperators != null && filterOperators.length)) {\n    throw new Error(`MUI: No filter operators found for column '${column.field}'.`);\n  }\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operator);\n  if (!filterOperator) {\n    throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);\n  }\n  const hasUserFunctionLegacy = !isInternalFilter(filterOperator.getApplyFilterFn);\n  const hasUserFunctionV7 = !isInternalFilter(filterOperator.getApplyFilterFnV7);\n  const publicApiRef = getPublicApiRef(apiRef);\n  if (filterOperator.getApplyFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {\n    const applyFilterOnRow = filterOperator.getApplyFilterFnV7(newFilterItem, column);\n    if (typeof applyFilterOnRow !== 'function') {\n      return null;\n    }\n    return {\n      v7: true,\n      item: newFilterItem,\n      fn: row => {\n        let value = apiRef.current.getRowValue(row, column);\n        if (ignoreDiacritics) {\n          value = removeDiacritics(value);\n        }\n        return applyFilterOnRow(value, row, column, publicApiRef);\n      }\n    };\n  }\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n  return {\n    v7: false,\n    item: newFilterItem,\n    fn: rowId => {\n      const params = apiRef.current.getCellParams(rowId, newFilterItem.field);\n      GLOBAL_API_REF.current = publicApiRef;\n      if (ignoreDiacritics) {\n        params.value = removeDiacritics(params.value);\n      }\n      const result = applyFilterOnRow(params);\n      GLOBAL_API_REF.current = null;\n      return result;\n    }\n  };\n};\nlet filterItemsApplierId = 1;\n\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n  if (appliers.length === 0) {\n    return null;\n  }\n  if (disableEval || !getHasEval()) {\n    // This is the original logic, which is used if `eval()` is not supported (aka prevented by CSP).\n    return (row, shouldApplyFilter) => {\n      const resultPerItemId = {};\n      for (let i = 0; i < appliers.length; i += 1) {\n        const applier = appliers[i];\n        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {\n          resultPerItemId[applier.item.id] = applier.v7 ? applier.fn(row) : applier.fn(apiRef.current.getRowId(row));\n        }\n      }\n      return resultPerItemId;\n    };\n  }\n\n  // We generate a new function with `new Function()` to avoid expensive patterns for JS engines\n  // such as a dynamic object assignment, e.g. `{ [dynamicKey]: value }`.\n  const filterItemCore = new Function('getRowId', 'appliers', 'row', 'shouldApplyFilter', `\"use strict\";\n${appliers.map((applier, i) => `const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join('\\n')}\n\nconst result$$ = {\n${appliers.map((applier, i) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i}\n    ? false\n    : ${applier.v7 ? `appliers[${i}].fn(row)` : `appliers[${i}].fn(getRowId(row))`},`).join('\\n')}\n};\n\nreturn result$$;`.replaceAll('$$', String(filterItemsApplierId)));\n  filterItemsApplierId += 1;\n\n  // Assign to the arrow function a name to help debugging\n  const filterItem = (row, shouldApplyItem) => filterItemCore(apiRef.current.getRowId, appliers, row, shouldApplyItem);\n  return filterItem;\n};\n\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  var _filterModel$quickFil, _filterModel$quickFil2, _filterModel$quickFil3;\n  const quickFilterValues = (_filterModel$quickFil = (_filterModel$quickFil2 = filterModel.quickFilterValues) == null ? void 0 : _filterModel$quickFil2.filter(Boolean)) != null ? _filterModel$quickFil : [];\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n  const quickFilterExcludeHiddenColumns = (_filterModel$quickFil3 = filterModel.quickFilterExcludeHiddenColumns) != null ? _filterModel$quickFil3 : false;\n  const columnFields = quickFilterExcludeHiddenColumns ? gridVisibleColumnFieldsSelector(apiRef) : gridColumnFieldsSelector(apiRef);\n  const appliersPerField = [];\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  const publicApiRef = getPublicApiRef(apiRef);\n  columnFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;\n    const getApplyQuickFilterFnV7 = column == null ? void 0 : column.getApplyQuickFilterFnV7;\n    const hasUserFunctionLegacy = !isInternalFilter(getApplyQuickFilterFn);\n    const hasUserFunctionV7 = !isInternalFilter(getApplyQuickFilterFnV7);\n    if (getApplyQuickFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            v7: true,\n            fn: getApplyQuickFilterFnV7(value, column, publicApiRef)\n          };\n        })\n      });\n    } else if (getApplyQuickFilterFn) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            v7: false,\n            fn: getApplyQuickFilterFn(value, column, publicApiRef)\n          };\n        })\n      });\n    }\n  });\n  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {\n    const result = {};\n    const usedCellParams = {};\n\n    /* eslint-disable no-restricted-syntax, no-labels */\n    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {\n      const filterValue = quickFilterValues[v];\n      for (let i = 0; i < appliersPerField.length; i += 1) {\n        const {\n          column,\n          appliers\n        } = appliersPerField[i];\n        const {\n          field\n        } = column;\n        if (shouldApplyFilter && !shouldApplyFilter(field)) {\n          continue;\n        }\n        const applier = appliers[v];\n        let value = apiRef.current.getRowValue(row, column);\n        if (applier.fn === null) {\n          continue;\n        }\n        if (applier.v7) {\n          if (ignoreDiacritics) {\n            value = removeDiacritics(value);\n          }\n          const isMatching = applier.fn(value, row, column, publicApiRef);\n          if (isMatching) {\n            result[filterValue] = true;\n            continue outer;\n          }\n        } else {\n          var _usedCellParams$field;\n          const cellParams = (_usedCellParams$field = usedCellParams[field]) != null ? _usedCellParams$field : apiRef.current.getCellParams(apiRef.current.getRowId(row), field);\n          if (ignoreDiacritics) {\n            cellParams.value = removeDiacritics(cellParams.value);\n          }\n          usedCellParams[field] = cellParams;\n          const isMatching = applier.fn(cellParams);\n          if (isMatching) {\n            result[filterValue] = true;\n            continue outer;\n          }\n        }\n      }\n      result[filterValue] = false;\n    }\n    /* eslint-enable no-restricted-syntax, no-labels */\n\n    return result;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef, disableEval) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return function isRowMatchingFilters(row, shouldApplyFilter, result) {\n    var _isRowMatchingFilterI, _isRowMatchingQuickFi;\n    result.passingFilterItems = (_isRowMatchingFilterI = isRowMatchingFilterItems == null ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) != null ? _isRowMatchingFilterI : null;\n    result.passingQuickFilterValues = (_isRowMatchingQuickFi = isRowMatchingQuickFilter == null ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) != null ? _isRowMatchingQuickFi : null;\n  };\n};\nconst isNotNull = result => result != null;\nconst filterModelItems = (cache, apiRef, items) => {\n  if (!cache.cleanedFilterItems) {\n    cache.cleanedFilterItems = items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  }\n  return cache.cleanedFilterItems;\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache) => {\n  const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);\n  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);\n  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);\n\n  // get result for filter items model\n  if (cleanedFilterItemResults.length > 0) {\n    var _filterModel$logicOpe;\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n    const logicOperator = (_filterModel$logicOpe = filterModel.logicOperator) != null ? _filterModel$logicOpe : getDefaultGridFilterModel().logicOperator;\n    if (logicOperator === GridLogicOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  }\n\n  // get result for quick filter model\n  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    var _filterModel$quickFil4;\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n    const quickFilterLogicOperator = (_filterModel$quickFil4 = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil4 : getDefaultGridFilterModel().quickFilterLogicOperator;\n    if (quickFilterLogicOperator === GridLogicOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["_extends","GridLogicOperator","GLOBAL_API_REF","isInternalFilter","getDefaultGridFilterModel","buildWarning","getPublicApiRef","gridColumnFieldsSelector","gridColumnLookupSelector","gridVisibleColumnFieldsSelector","hasEval","getHasEval","undefined","Function","_","cleanFilterItem","item","apiRef","cleanItem","id","Math","round","random","operator","column","field","filterOperators","value","filterModelDisableMultiColumnsFilteringWarning","filterModelMissingItemIdWarning","filterModelMissingItemOperatorWarning","sanitizeFilterModel","model","disableMultipleColumnsFiltering","hasSeveralItems","items","length","hasItemsWithoutIds","some","hasItemWithoutOperator","map","mergeStateWithFilterModel","filterModel","filteringState","removeDiacritics","normalize","replace","getFilterCallbackFromItem","filterItem","current","getColumn","parsedValue","valueParser","_filterItem$value","parser","Array","isArray","x","ignoreDiacritics","rootProps","newFilterItem","Error","filterOperator","find","hasUserFunctionLegacy","getApplyFilterFn","hasUserFunctionV7","getApplyFilterFnV7","publicApiRef","applyFilterOnRow","v7","fn","row","getRowValue","rowId","params","getCellParams","result","filterItemsApplierId","buildAggregatedFilterItemsApplier","disableEval","appliers","filter","callback","shouldApplyFilter","resultPerItemId","i","applier","getRowId","filterItemCore","JSON","stringify","join","String","replaceAll","shouldApplyItem","buildAggregatedQuickFilterApplier","_filterModel$quickFil","_filterModel$quickFil2","_filterModel$quickFil3","quickFilterValues","Boolean","quickFilterExcludeHiddenColumns","columnFields","appliersPerField","forEach","getApplyQuickFilterFn","getApplyQuickFilterFnV7","push","quickFilterValue","isRowMatchingQuickFilter","usedCellParams","outer","v","filterValue","isMatching","_usedCellParams$field","cellParams","buildAggregatedFilterApplier","isRowMatchingFilterItems","isRowMatchingFilters","_isRowMatchingFilterI","_isRowMatchingQuickFi","passingFilterItems","passingQuickFilterValues","isNotNull","filterModelItems","cache","cleanedFilterItems","passFilterLogic","allFilterItemResults","allQuickFilterResults","cleanedFilterItemResults","cleanedQuickFilterResults","_filterModel$logicOpe","filterItemPredicate","filterItemResult","logicOperator","And","passesAllFilters","every","passesSomeFilters","_filterModel$quickFil4","quickFilterValuePredicate","quickFilterValueResult","quickFilterLogicOperator","passesAllQuickFilterValues","passesSomeQuickFilterValues"],"sources":["A:/Personal_Projects/React_MVC/Code/frontend/node_modules/@mui/x-data-grid/hooks/features/filter/gridFilterUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { GridLogicOperator } from '../../../models';\nimport { GLOBAL_API_REF, isInternalFilter } from '../../../colDef/utils';\nimport { getDefaultGridFilterModel } from './gridFilterState';\nimport { buildWarning } from '../../../utils/warning';\nimport { getPublicApiRef } from '../../../utils/getPublicApiRef';\nimport { gridColumnFieldsSelector, gridColumnLookupSelector, gridVisibleColumnFieldsSelector } from '../columns';\nlet hasEval;\nfunction getHasEval() {\n  if (hasEval !== undefined) {\n    return hasEval;\n  }\n  try {\n    hasEval = new Function('return true')();\n  } catch (_) {\n    hasEval = false;\n  }\n  return hasEval;\n}\n/**\n * Adds default values to the optional fields of a filter items.\n * @param {GridFilterItem} item The raw filter item.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @return {GridFilterItem} The clean filter item with an uniq ID and an always-defined operator.\n * TODO: Make the typing reflect the different between GridFilterInputItem and GridFilterItem.\n */\nexport const cleanFilterItem = (item, apiRef) => {\n  const cleanItem = _extends({}, item);\n  if (cleanItem.id == null) {\n    cleanItem.id = Math.round(Math.random() * 1e5);\n  }\n  if (cleanItem.operator == null) {\n    // Selects a default operator\n    // We don't use `apiRef.current.getColumn` because it is not ready during state initialization\n    const column = gridColumnLookupSelector(apiRef)[cleanItem.field];\n    cleanItem.operator = column && column.filterOperators[0].value;\n  }\n  return cleanItem;\n};\nconst filterModelDisableMultiColumnsFilteringWarning = buildWarning(['MUI: The `filterModel` can only contain a single item when the `disableMultipleColumnsFiltering` prop is set to `true`.', 'If you are using the community version of the `DataGrid`, this prop is always `true`.'], 'error');\nconst filterModelMissingItemIdWarning = buildWarning('MUI: The `id` field is required on `filterModel.items` when you use multiple filters.', 'error');\nconst filterModelMissingItemOperatorWarning = buildWarning('MUI: The `operator` field is required on `filterModel.items`, one or more of your filtering item has no `operator` provided.', 'error');\nexport const sanitizeFilterModel = (model, disableMultipleColumnsFiltering, apiRef) => {\n  const hasSeveralItems = model.items.length > 1;\n  let items;\n  if (hasSeveralItems && disableMultipleColumnsFiltering) {\n    filterModelDisableMultiColumnsFilteringWarning();\n    items = [model.items[0]];\n  } else {\n    items = model.items;\n  }\n  const hasItemsWithoutIds = hasSeveralItems && items.some(item => item.id == null);\n  const hasItemWithoutOperator = items.some(item => item.operator == null);\n  if (hasItemsWithoutIds) {\n    filterModelMissingItemIdWarning();\n  }\n  if (hasItemWithoutOperator) {\n    filterModelMissingItemOperatorWarning();\n  }\n  if (hasItemWithoutOperator || hasItemsWithoutIds) {\n    return _extends({}, model, {\n      items: items.map(item => cleanFilterItem(item, apiRef))\n    });\n  }\n  if (model.items !== items) {\n    return _extends({}, model, {\n      items\n    });\n  }\n  return model;\n};\nexport const mergeStateWithFilterModel = (filterModel, disableMultipleColumnsFiltering, apiRef) => filteringState => _extends({}, filteringState, {\n  filterModel: sanitizeFilterModel(filterModel, disableMultipleColumnsFiltering, apiRef)\n});\nexport const removeDiacritics = value => {\n  if (typeof value === 'string') {\n    return value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n  }\n  return value;\n};\nconst getFilterCallbackFromItem = (filterItem, apiRef) => {\n  if (!filterItem.field || !filterItem.operator) {\n    return null;\n  }\n  const column = apiRef.current.getColumn(filterItem.field);\n  if (!column) {\n    return null;\n  }\n  let parsedValue;\n  if (column.valueParser) {\n    var _filterItem$value;\n    const parser = column.valueParser;\n    parsedValue = Array.isArray(filterItem.value) ? (_filterItem$value = filterItem.value) == null ? void 0 : _filterItem$value.map(x => parser(x)) : parser(filterItem.value);\n  } else {\n    parsedValue = filterItem.value;\n  }\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  if (ignoreDiacritics) {\n    parsedValue = removeDiacritics(parsedValue);\n  }\n  const newFilterItem = _extends({}, filterItem, {\n    value: parsedValue\n  });\n  const filterOperators = column.filterOperators;\n  if (!(filterOperators != null && filterOperators.length)) {\n    throw new Error(`MUI: No filter operators found for column '${column.field}'.`);\n  }\n  const filterOperator = filterOperators.find(operator => operator.value === newFilterItem.operator);\n  if (!filterOperator) {\n    throw new Error(`MUI: No filter operator found for column '${column.field}' and operator value '${newFilterItem.operator}'.`);\n  }\n  const hasUserFunctionLegacy = !isInternalFilter(filterOperator.getApplyFilterFn);\n  const hasUserFunctionV7 = !isInternalFilter(filterOperator.getApplyFilterFnV7);\n  const publicApiRef = getPublicApiRef(apiRef);\n  if (filterOperator.getApplyFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {\n    const applyFilterOnRow = filterOperator.getApplyFilterFnV7(newFilterItem, column);\n    if (typeof applyFilterOnRow !== 'function') {\n      return null;\n    }\n    return {\n      v7: true,\n      item: newFilterItem,\n      fn: row => {\n        let value = apiRef.current.getRowValue(row, column);\n        if (ignoreDiacritics) {\n          value = removeDiacritics(value);\n        }\n        return applyFilterOnRow(value, row, column, publicApiRef);\n      }\n    };\n  }\n  const applyFilterOnRow = filterOperator.getApplyFilterFn(newFilterItem, column);\n  if (typeof applyFilterOnRow !== 'function') {\n    return null;\n  }\n  return {\n    v7: false,\n    item: newFilterItem,\n    fn: rowId => {\n      const params = apiRef.current.getCellParams(rowId, newFilterItem.field);\n      GLOBAL_API_REF.current = publicApiRef;\n      if (ignoreDiacritics) {\n        params.value = removeDiacritics(params.value);\n      }\n      const result = applyFilterOnRow(params);\n      GLOBAL_API_REF.current = null;\n      return result;\n    }\n  };\n};\nlet filterItemsApplierId = 1;\n\n/**\n * Generates a method to easily check if a row is matching the current filter model.\n * @param {GridFilterModel} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedFilterItemsApplier = (filterModel, apiRef, disableEval) => {\n  const {\n    items\n  } = filterModel;\n  const appliers = items.map(item => getFilterCallbackFromItem(item, apiRef)).filter(callback => !!callback);\n  if (appliers.length === 0) {\n    return null;\n  }\n  if (disableEval || !getHasEval()) {\n    // This is the original logic, which is used if `eval()` is not supported (aka prevented by CSP).\n    return (row, shouldApplyFilter) => {\n      const resultPerItemId = {};\n      for (let i = 0; i < appliers.length; i += 1) {\n        const applier = appliers[i];\n        if (!shouldApplyFilter || shouldApplyFilter(applier.item.field)) {\n          resultPerItemId[applier.item.id] = applier.v7 ? applier.fn(row) : applier.fn(apiRef.current.getRowId(row));\n        }\n      }\n      return resultPerItemId;\n    };\n  }\n\n  // We generate a new function with `new Function()` to avoid expensive patterns for JS engines\n  // such as a dynamic object assignment, e.g. `{ [dynamicKey]: value }`.\n  const filterItemCore = new Function('getRowId', 'appliers', 'row', 'shouldApplyFilter', `\"use strict\";\n${appliers.map((applier, i) => `const shouldApply${i} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(applier.item.field)});`).join('\\n')}\n\nconst result$$ = {\n${appliers.map((applier, i) => `  ${JSON.stringify(String(applier.item.id))}: !shouldApply${i}\n    ? false\n    : ${applier.v7 ? `appliers[${i}].fn(row)` : `appliers[${i}].fn(getRowId(row))`},`).join('\\n')}\n};\n\nreturn result$$;`.replaceAll('$$', String(filterItemsApplierId)));\n  filterItemsApplierId += 1;\n\n  // Assign to the arrow function a name to help debugging\n  const filterItem = (row, shouldApplyItem) => filterItemCore(apiRef.current.getRowId, appliers, row, shouldApplyItem);\n  return filterItem;\n};\n\n/**\n * Generates a method to easily check if a row is matching the current quick filter.\n * @param {any[]} filterModel The model with which we want to filter the rows.\n * @param {React.MutableRefObject<GridPrivateApiCommunity>} apiRef The API of the grid.\n * @returns {GridAggregatedFilterItemApplier | null} A method that checks if a row is matching the current filter model. If `null`, we consider that all the rows are matching the filters.\n */\nconst buildAggregatedQuickFilterApplier = (filterModel, apiRef) => {\n  var _filterModel$quickFil, _filterModel$quickFil2, _filterModel$quickFil3;\n  const quickFilterValues = (_filterModel$quickFil = (_filterModel$quickFil2 = filterModel.quickFilterValues) == null ? void 0 : _filterModel$quickFil2.filter(Boolean)) != null ? _filterModel$quickFil : [];\n  if (quickFilterValues.length === 0) {\n    return null;\n  }\n  const quickFilterExcludeHiddenColumns = (_filterModel$quickFil3 = filterModel.quickFilterExcludeHiddenColumns) != null ? _filterModel$quickFil3 : false;\n  const columnFields = quickFilterExcludeHiddenColumns ? gridVisibleColumnFieldsSelector(apiRef) : gridColumnFieldsSelector(apiRef);\n  const appliersPerField = [];\n  const {\n    ignoreDiacritics\n  } = apiRef.current.rootProps;\n  const publicApiRef = getPublicApiRef(apiRef);\n  columnFields.forEach(field => {\n    const column = apiRef.current.getColumn(field);\n    const getApplyQuickFilterFn = column == null ? void 0 : column.getApplyQuickFilterFn;\n    const getApplyQuickFilterFnV7 = column == null ? void 0 : column.getApplyQuickFilterFnV7;\n    const hasUserFunctionLegacy = !isInternalFilter(getApplyQuickFilterFn);\n    const hasUserFunctionV7 = !isInternalFilter(getApplyQuickFilterFnV7);\n    if (getApplyQuickFilterFnV7 && !(hasUserFunctionLegacy && !hasUserFunctionV7)) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            v7: true,\n            fn: getApplyQuickFilterFnV7(value, column, publicApiRef)\n          };\n        })\n      });\n    } else if (getApplyQuickFilterFn) {\n      appliersPerField.push({\n        column,\n        appliers: quickFilterValues.map(quickFilterValue => {\n          const value = ignoreDiacritics ? removeDiacritics(quickFilterValue) : quickFilterValue;\n          return {\n            v7: false,\n            fn: getApplyQuickFilterFn(value, column, publicApiRef)\n          };\n        })\n      });\n    }\n  });\n  return function isRowMatchingQuickFilter(row, shouldApplyFilter) {\n    const result = {};\n    const usedCellParams = {};\n\n    /* eslint-disable no-restricted-syntax, no-labels */\n    outer: for (let v = 0; v < quickFilterValues.length; v += 1) {\n      const filterValue = quickFilterValues[v];\n      for (let i = 0; i < appliersPerField.length; i += 1) {\n        const {\n          column,\n          appliers\n        } = appliersPerField[i];\n        const {\n          field\n        } = column;\n        if (shouldApplyFilter && !shouldApplyFilter(field)) {\n          continue;\n        }\n        const applier = appliers[v];\n        let value = apiRef.current.getRowValue(row, column);\n        if (applier.fn === null) {\n          continue;\n        }\n        if (applier.v7) {\n          if (ignoreDiacritics) {\n            value = removeDiacritics(value);\n          }\n          const isMatching = applier.fn(value, row, column, publicApiRef);\n          if (isMatching) {\n            result[filterValue] = true;\n            continue outer;\n          }\n        } else {\n          var _usedCellParams$field;\n          const cellParams = (_usedCellParams$field = usedCellParams[field]) != null ? _usedCellParams$field : apiRef.current.getCellParams(apiRef.current.getRowId(row), field);\n          if (ignoreDiacritics) {\n            cellParams.value = removeDiacritics(cellParams.value);\n          }\n          usedCellParams[field] = cellParams;\n          const isMatching = applier.fn(cellParams);\n          if (isMatching) {\n            result[filterValue] = true;\n            continue outer;\n          }\n        }\n      }\n      result[filterValue] = false;\n    }\n    /* eslint-enable no-restricted-syntax, no-labels */\n\n    return result;\n  };\n};\nexport const buildAggregatedFilterApplier = (filterModel, apiRef, disableEval) => {\n  const isRowMatchingFilterItems = buildAggregatedFilterItemsApplier(filterModel, apiRef, disableEval);\n  const isRowMatchingQuickFilter = buildAggregatedQuickFilterApplier(filterModel, apiRef);\n  return function isRowMatchingFilters(row, shouldApplyFilter, result) {\n    var _isRowMatchingFilterI, _isRowMatchingQuickFi;\n    result.passingFilterItems = (_isRowMatchingFilterI = isRowMatchingFilterItems == null ? void 0 : isRowMatchingFilterItems(row, shouldApplyFilter)) != null ? _isRowMatchingFilterI : null;\n    result.passingQuickFilterValues = (_isRowMatchingQuickFi = isRowMatchingQuickFilter == null ? void 0 : isRowMatchingQuickFilter(row, shouldApplyFilter)) != null ? _isRowMatchingQuickFi : null;\n  };\n};\nconst isNotNull = result => result != null;\nconst filterModelItems = (cache, apiRef, items) => {\n  if (!cache.cleanedFilterItems) {\n    cache.cleanedFilterItems = items.filter(item => getFilterCallbackFromItem(item, apiRef) !== null);\n  }\n  return cache.cleanedFilterItems;\n};\nexport const passFilterLogic = (allFilterItemResults, allQuickFilterResults, filterModel, apiRef, cache) => {\n  const cleanedFilterItems = filterModelItems(cache, apiRef, filterModel.items);\n  const cleanedFilterItemResults = allFilterItemResults.filter(isNotNull);\n  const cleanedQuickFilterResults = allQuickFilterResults.filter(isNotNull);\n\n  // get result for filter items model\n  if (cleanedFilterItemResults.length > 0) {\n    var _filterModel$logicOpe;\n    // Return true if the item pass with one of the rows\n    const filterItemPredicate = item => {\n      return cleanedFilterItemResults.some(filterItemResult => filterItemResult[item.id]);\n    };\n    const logicOperator = (_filterModel$logicOpe = filterModel.logicOperator) != null ? _filterModel$logicOpe : getDefaultGridFilterModel().logicOperator;\n    if (logicOperator === GridLogicOperator.And) {\n      const passesAllFilters = cleanedFilterItems.every(filterItemPredicate);\n      if (!passesAllFilters) {\n        return false;\n      }\n    } else {\n      const passesSomeFilters = cleanedFilterItems.some(filterItemPredicate);\n      if (!passesSomeFilters) {\n        return false;\n      }\n    }\n  }\n\n  // get result for quick filter model\n  if (cleanedQuickFilterResults.length > 0 && filterModel.quickFilterValues != null) {\n    var _filterModel$quickFil4;\n    // Return true if the item pass with one of the rows\n    const quickFilterValuePredicate = value => {\n      return cleanedQuickFilterResults.some(quickFilterValueResult => quickFilterValueResult[value]);\n    };\n    const quickFilterLogicOperator = (_filterModel$quickFil4 = filterModel.quickFilterLogicOperator) != null ? _filterModel$quickFil4 : getDefaultGridFilterModel().quickFilterLogicOperator;\n    if (quickFilterLogicOperator === GridLogicOperator.And) {\n      const passesAllQuickFilterValues = filterModel.quickFilterValues.every(quickFilterValuePredicate);\n      if (!passesAllQuickFilterValues) {\n        return false;\n      }\n    } else {\n      const passesSomeQuickFilterValues = filterModel.quickFilterValues.some(quickFilterValuePredicate);\n      if (!passesSomeQuickFilterValues) {\n        return false;\n      }\n    }\n  }\n  return true;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}